---
- name: ansible-volumes | nfs-server | configure ipa client
  ansible.builtin.import_role:
    name: tcharl.ansible_securehost
  when: standalone_role

- name: ansible-volumes | nfs-server | configure nfs service
  freeipa.ansible_freeipa.ipaservice:
    ipaadmin_password: "{{ company_realm_password }}"
    name: nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
    force: true
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"

- name: ansible-volumes | nfs-server | allows nfs server to get keytab
  freeipa.ansible_freeipa.ipaservice:
    ipaadmin_password: "{{ company_realm_password }}"
    name: nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
    action: member
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"

- name: ansible-volumes | nfs-server | check if {{ keytab.value.keytab }} exists
  ansible.builtin.stat:
    path: '{{ keytab_path }}'
  register: keytab_stat

- name: ansible-volumes | nfs-server | check kvno of keytab
  ansible.builtin.command: kinit -k -t {{ keytab_path }} nfs/{{ hostname | default(volume_machine_hostname.stdout) }}
  register: validate_keytab
  changed_when: false
  failed_when: false
  when: keytab_stat.stat.exists
  become: true

- name: ansible-volumes | nfs-server | install {{ keytab }}
  ansible.builtin.shell: |
    set -o pipefail && echo '{{ company_realm_password }}' | kinit admin > /dev/null
    ipa-getkeytab -s {{ groups[idm_group][0] }} -p nfs/{{ hostname | default(volume_machine_hostname.stdout) }} -k {{ keytab_path }}
  register: get_keytab
  when: (not keytab_stat.stat.exists) or (validate_keytab.rc > 0)
  changed_when: "'Keytab successfully retrieved and stored in' in get_keytab.stdout"
  no_log: "{{ secure_logs }}"
  become: true

- name: ansible-volumes | nfs | loop over entries
  ansible.builtin.include_tasks: nfs-vgs.yml
  loop: "{{ lvm_groups }}"
  loop_control:
    loop_var: vgs

- name: ansible-volumes | nfs-server | start
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: restarted
    enabled: true
  become: true
  with_items:
    - "nfs-server"
    - "nfs-idmapd"

- name: ansible-volumes | nfs-server | reexport entries
  ansible.builtin.command: "exportfs -rav"
  changed_when: false
  become: true

- name: ansible-volumes | nfs-server | install firewalld
  become: true
  ansible.builtin.package:
    name: firewalld
    state: present

- name: ansible-volumes | nfs-server | enable and start firewalld
  become: true
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: ansible-volumes | nfs-server | authorize nfs service
  become: true
  ansible.posix.firewalld:
    zone: "{{ datastore_firewall_zone }}"
    permanent: true
    immediate: true
    service: "{{ item }}"
    state: enabled
  with_items:
    - "nfs"
    - "mountd"
