---
# tasks file for lvm
- name: ansible-volumes | debug vg variable
  ansible.builtin.debug:
    var: avvg
    verbosity: 1

- name: ansible-volumes | debug lv variable
  ansible.builtin.debug:
    var: avlv
    verbosity: 1

- name: ansible-volumes | check already converted
  ansible.builtin.shell: "lvs -o metadata_lv  {{ avvg.vgname }} --separator='|' --noheadings | grep -c '{{ avlv.lvname }}_tmeta'"
  become: yes
  register: metadataalreadybound
  ignore_errors: true
  changed_when: no

- name: ansible-volumes | unmounting filesystem(s) before converting to thinpool
  ansible.posix.mount:
    path: "{{ avlv.mntp }}"
    src: "/dev/{{ avvg.vgname }}/{{ avlv.lvname }}"
    fstype: "{{ avlv.filesystem | default(omit) }}"
    state: "absent"
  become: true
  when: >
    (
    (metadataalreadybound is failed or alreadyhasmetadata.stdout == 0) and
    (avlv.mntp is defined)
    )

- name: ansible-volumes | convert thinpool
  ansible.builtin.command: lvconvert -y --zero n -c 512K --thinpool {{ avvg.vgname }}/{{ avlv.lvname }} --poolmetadata {{ avlv.metadata }}
  become: yes
  when: metadataalreadybound is failed  or alreadyhasmetadata.stdout == 0

- name: ansible-volumes | mounting new filesystem(s) after thinpool conversion
  ansible.posix.mount:
    path: "{{ avlv.mntp }}"
    src: "/dev/{{ avvg.vgname }}/{{ avlv.lvname }}"
    fstype: "{{ avlv.filesystem }}"
    state: "mounted"
    opts: "{{ avlv.mopts | default('defaults') }}"
  become: true
  when: >
    (
    (metadataalreadybound is failed  or alreadyhasmetadata.stdout == 0) and
    (avlv.mntp is defined)
    )