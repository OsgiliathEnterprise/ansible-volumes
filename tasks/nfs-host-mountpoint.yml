---

- name: ansible-volumes | nfs-host-mountpoint | datastore
  setup:
  register: datastore_machine
  delegate_facts: true
  delegate_to: "{{ nfs_server.host }}" # TODO concat all masters IPs

- name: ansible-volumes | nfs-host-mountpoint | compute ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ datastore_machine.ansible_facts['ansible_' + preferred_nic].ipv4.address if preferred_nic is defined else datastore_machine.ansible_facts.ansible_default_ipv4.address | default(datastore_machine.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: datastore_ip

- name: ansible-volumes | nfs-host-mountpoint | check host is in hostfile
  shell: >
    set -o pipefail &&
    cat /etc/hosts | egrep -c '{{ datastore_ip.msg.replace('\.', '\\.') }}'
  register: hosts_ip_entry_exists
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: ansible-volumes | nfs-host-mountpoint | check ip and hostname is in hostfile
  shell: >
    set -o pipefail &&
    cat /etc/hosts | egrep -c '{{ datastore_ip.msg.replace('\.', '\\.') }}.*{{ nfs_server.host.replace('\.', '\\.') }}'
  register: hosts_entry_exists
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: ansible-volumes | nfs-host-mountpoint | add host in hosts file if ip entry exists
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^{{ datastore_ip.msg }}(.*)$'
    backrefs: yes
    line: '{{ datastore_ip.msg }} {{ nfs_server.host }}\1'
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    - hosts_ip_entry_exists.rc == 0
    - hosts_ip_entry_exists.stdout != 0
    - hosts_entry_exists.rc == 1 or hosts_entry_exists.stdout == 0

- name: ansible-volumes | nfs-host-mountpoint | add host in hosts file if ip_entry does not exist
  ansible.builtin.lineinfile:
    path: /etc/hosts
    insertbefore: BOF
    line: '{{ datastore_ip.msg }} {{ nfs_server.host }}'
    owner: root
    group: root
    mode: '0644'
  become: true
  when:
    hosts_ip_entry_exists is failed or
    hosts_ip_entry_exists.rc == 1 or
    hosts_ip_entry_exists.stdout == 0

- name: ansible-volumes | nfs-host-mountpoint | authorizes IPA client to get keytab
  freeipa.ansible_freeipa.ipaservice:
    ipaadmin_password: "{{ company_realm_password }}"
    name: nfs/{{ nfs_server.host }}
    allow_retrieve_keytab_host:
      - "{{ hostname | default(machine_hostname.stdout) }}"
    action: member
  no_log: True
  delegate_to: "{{ groups[idm_group][0] }}"

- name: ansible-volumes | nfs-host-mountpoint | loop over mounpoints
  ansible.builtin.include_tasks: nfs-client-entry.yml
  loop: "{{ nfs_server.mountpoints }}"
  loop_control:
    loop_var: mounpoint
